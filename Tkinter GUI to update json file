import json
import tkinter as tk
from tkinter import messagebox
import os

# JSON file path
JSON_FILE = "data.json"

# Load existing data if available
def load_json():
    if os.path.exists(JSON_FILE):
        with open(JSON_FILE, "r") as f:
            try:
                return json.load(f)  # Load existing JSON data
            except json.JSONDecodeError:
                return {}  # Return empty if file is corrupt
    return {}  # Return empty if file doesn't exist

# Save updates to JSON file
def save_and_update():
    existing_data = load_json()  # Load current data

    # Get user input
    name = name_entry.get().strip()
    age = age_entry.get().strip()
    email = email_entry.get().strip()

    # Update only fields that are not empty
    if name:
        existing_data["name"] = name
    if age:
        try:
            existing_data["age"] = int(age)  # Ensure age is an integer
        except ValueError:
            messagebox.showerror("Error", "Age must be a number")
            return
    if email:
        existing_data["email"] = email

    # Save updated JSON back to file
    with open(JSON_FILE, "w") as f:
        json.dump(existing_data, f, indent=4)

    messagebox.showinfo("Success", "Data updated successfully!")

# GUI Setup
root = tk.Tk()
root.title("Update JSON Data")

# Load existing data into fields
data = load_json()

tk.Label(root, text="Name:").grid(row=0, column=0)
name_entry = tk.Entry(root)
name_entry.grid(row=0, column=1)
name_entry.insert(0, data.get("name", ""))  # Prefill with existing data

tk.Label(root, text="Age:").grid(row=1, column=0)
age_entry = tk.Entry(root)
age_entry.grid(row=1, column=1)
age_entry.insert(0, str(data.get("age", "")))  # Prefill

tk.Label(root, text="Email:").grid(row=2, column=0)
email_entry = tk.Entry(root)
email_entry.grid(row=2, column=1)
email_entry.insert(0, data.get("email", ""))  # Prefill

submit_button = tk.Button(root, text="Update JSON", command=save_and_update)
submit_button.grid(row=3, column=0, columnspan=2)

root.mainloop()
##################################
def update_multiple_dict_keys(main_key, updates):
    """Update multiple sub-keys within a dictionary inside a JSON key."""
    data = load_json()  # Load existing JSON data

    if main_key in data and isinstance(data[main_key], dict):
        # Update each sub-key specified in the 'updates' dictionary
        for sub_key, new_value in updates.items():
            data[main_key][sub_key] = new_value
    else:
        # If main_key doesn't exist or isn't a dict, create it
        data[main_key] = updates

    # Save updated JSON data
    with open(JSON_FILE, "w") as f:
        json.dump(data, f, indent=4)

    messagebox.showinfo("Success", "Contact info updated successfully!")
##################################
def save_and_update_contact():
    """Handles user input and updates multiple sub-keys in a dictionary inside JSON."""
    email_value = email_entry.get().strip()
    phone_value = phone_entry.get().strip()
    
    # Collect only non-empty values
    updates = {}
    if email_value:
        updates["email"] = email_value
    if phone_value:
        updates["phone"] = phone_value
    
    if not updates:
        messagebox.showerror("Error", "At least one field must be filled in.")
        return

    # Update the contact fields in JSON
    update_multiple_dict_keys("contact", updates)
##################################
def create_gui():
    """Create and display the Tkinter GUI for updating multiple dictionary values."""
    global root, email_entry, phone_entry

    root = tk.Tk()
    root.title("Update Contact Info")

    data = load_json()
    contact_data = data.get("contact", {})

    # Email input field
    tk.Label(root, text="New Email:").grid(row=0, column=0)
    email_entry = tk.Entry(root)
    email_entry.grid(row=0, column=1)

    # Phone input field
    tk.Label(root, text="New Phone:").grid(row=1, column=0)
    phone_entry = tk.Entry(root)
    phone_entry.grid(row=1, column=1)

    # Display existing contact info
    existing_contact_text = f"Email: {contact_data.get('email', 'N/A')}\nPhone: {contact_data.get('phone', 'N/A')}"
    tk.Label(root, text="Current Contact Info:").grid(row=2, column=0)
    tk.Label(root, text=existing_contact_text, fg="blue").grid(row=2, column=1)

    # Submit button
    submit_button = tk.Button(root, text="Update Contact", command=save_and_update_contact)
    submit_button.grid(row=3, column=0, columnspan=2)

    root.mainloop()

##################################
#This solution also updates subkeys

import tkinter as tk
from tkinter import ttk
import json
import os

# Path to the existing JSON file
JSON_FILE = "data.json"

# Load existing JSON data from the file
def load_json_data():
    if os.path.exists(JSON_FILE):
        with open(JSON_FILE, "r") as file:
            return json.load(file)
    else:
        # Default data if the file doesn't exist
        return {
            "key1": "",
            "key2": {
                "nested_key1": "",
                "nested_key2": ""
            },
            "key3": ""
        }

# Function to save the updated JSON data
def save_data():
    # Update the JSON data with the entered values
    data["key1"] = key1_entry.get()
    data["key2"]["nested_key1"] = nested_key1_entry.get()
    data["key2"]["nested_key2"] = nested_key2_entry.get()
    data["key3"] = key3_entry.get()
    
    # Save the updated data back to the JSON file
    with open(JSON_FILE, "w") as file:
        json.dump(data, file, indent=4)
    
    # Close the Tkinter window and proceed with the rest of the script
    root.destroy()

# Load existing JSON data
data = load_json_data()

# Create the Tkinter window
root = tk.Tk()
root.title("Update JSON Data Dynamically")

# Input field for key1
key1_label = ttk.Label(root, text="Enter value for key1:")
key1_label.grid(row=0, column=0, padx=10, pady=10)
key1_entry = ttk.Entry(root)
key1_entry.insert(0, data["key1"])  # Pre-fill with existing value
key1_entry.grid(row=0, column=1, padx=10, pady=10)

# Input field for nested_key1
nested_key1_label = ttk.Label(root, text="Enter value for nested_key1:")
nested_key1_label.grid(row=1, column=0, padx=10, pady=10)
nested_key1_entry = ttk.Entry(root)
nested_key1_entry.insert(0, data["key2"]["nested_key1"])  # Pre-fill with existing value
nested_key1_entry.grid(row=1, column=1, padx=10, pady=10)

# Input field for nested_key2
nested_key2_label = ttk.Label(root, text="Enter value for nested_key2:")
nested_key2_label.grid(row=2, column=0, padx=10, pady=10)
nested_key2_entry = ttk.Entry(root)
nested_key2_entry.insert(0, data["key2"]["nested_key2"])  # Pre-fill with existing value
nested_key2_entry.grid(row=2, column=1, padx=10, pady=10)

# Input field for key3
key3_label = ttk.Label(root, text="Enter value for key3:")
key3_label.grid(row=3, column=0, padx=10, pady=10)
key3_entry = ttk.Entry(root)
key3_entry.insert(0, data["key3"])  # Pre-fill with existing value
key3_entry.grid(row=3, column=1, padx=10, pady=10)

# Save button
save_button = ttk.Button(root, text="Save and Continue", command=save_data)
save_button.grid(row=4, column=0, columnspan=2, pady=10)

# Run the Tkinter event loop
root.mainloop()

# The rest of the script continues here after the Tkinter window is closed
print("Updated JSON data saved. Continuing with the rest of the script...")
print(data)