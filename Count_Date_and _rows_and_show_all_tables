#Method 1

import pyodbc
import pandas as pd
import datetime

# Database connection parameters
server = 'your_server'
database = 'your_database'
username = 'your_username'
password = 'your_password'
connection_string = f'DRIVER={{ODBC Driver 17 for SQL Server}};SERVER={server};DATABASE={database};UID={username};PWD={password}'

# Connect to the database
conn = pyodbc.connect(connection_string)

# Read the list of tables and additional fields from a CSV file
tables_df = pd.read_csv('tables_list.csv')

# Generate a range of dates dynamically for the last 7 days
end_date = datetime.date.today()
start_date = end_date - datetime.timedelta(days=6)
date_range = pd.date_range(start=start_date, end=end_date)

# Query each table and store results in a DataFrame
results = []
for index, row in tables_df.iterrows():
    table = row['table_name']
    additional_fields = row.drop('table_name').to_dict()
    
    query = f"""
    SELECT 
        '{table}' AS table_name,
        CAST(date_column AS DATE) AS date,
        COUNT(*) AS row_count
    FROM {table}
    WHERE CAST(date_column AS DATE) BETWEEN '{start_date}' AND '{end_date}'
    GROUP BY CAST(date_column AS DATE)
    """
    df = pd.read_sql(query, conn)
    
    # Ensure all dates in the range are represented
    df = df.set_index('date').reindex(date_range, fill_value=0).reset_index()
    df['table_name'] = table
    
    # Add additional fields to the DataFrame
    for field, value in additional_fields.items():
        df[field] = value
    
    results.append(df)

# Concatenate all results into a single DataFrame
final_df = pd.concat(results, ignore_index=True)

# Pivot the DataFrame
pivot_df = final_df.pivot_table(index=['table_name'] + list(additional_fields.keys()), columns='date', values='row_count', fill_value=0).reset_index()

# Replace NaN and ')' with a specific string in one of the string columns
specific_string = 'SpecificString'
pivot_df = pivot_df.replace({pd.NA: specific_string, ')': specific_string})

# Close the database connection
conn.close()

# Save the final DataFrame to a CSV file
pivot_df.to_csv('final_results.csv', index=False)

# Create a CSS-styled HTML table
html_output = pivot_df.to_html(classes='styled-table', index=False)

# Add CSS styling with a banner at the top
css = """
<style>
body {
    font-family: sans-serif;
}
.banner {
    text-align: center;
    font-size: 2em;
    margin-top: 20px;
}
.thin-bar {
    height: 5px;
    background-color: #009879;
    margin-bottom: 20px;
}
.styled-table {
    border-collapse: collapse;
    margin: 25px 0;
    font-size: 0.9em;
    font-family: sans-serif;
    min-width: 400px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
}
.styled-table thead tr {
    background-color: #009879;
    color: #ffffff;
    text-align: left;
}
.styled-table th,
.styled-table td {
    padding: 12px 15px;
}
.styled-table tbody tr {
    border-bottom: 1px solid #dddddd;
}
.styled-table tbody tr:nth-of-type(even) {
    background-color: #f3f3f3;
}
.styled-table tbody tr:last-of-type {
    border-bottom: 2px solid #009879;
}
</style>
"""

# Combine CSS and HTML with a banner
html_output = f"""
<html>
<head>{css}</head>
<body>
<div class="banner">Your Organization Name</div>
<div class="thin-bar"></div>
{html_output}
</body>
</html>
"""

# Save the HTML output to a file
with open('output.html', 'w') as file:
    file.write(html_output)

print("CSV file and HTML table with CSS styling have been generated and saved as 'final_results.csv' and 'output.html'.")



#Method 2

import pandas as pd
import pyodbc
from datetime import datetime, timedelta

# Database connection parameters
server = 'your_server'
database = 'your_database'
username = 'your_username'
password = 'your_password'

# Connect to SQL Server
conn_string = f"DRIVER={{SQL Server}};SERVER={server};DATABASE={database};UID={username};PWD={password}"
conn = pyodbc.connect(conn_string)

# Read the list of tables and other fields from CSV
tables_df = pd.read_csv('tables.csv')  # Ensure your CSV has a 'TableName' column and other fields
table_names = tables_df['TableName'].tolist()

# Define date range
start_date = datetime(2023, 1, 1)  # Adjust as necessary
end_date = datetime(2023, 10, 1)    # Adjust as necessary
date_range = [start_date + timedelta(days=x) for x in range((end_date - start_date).days + 1)]

# Initialize results list
results = []

# Query each table for row counts per date
for index, row in tables_df.iterrows():
    table_name = row['TableName']
    other_fields = row.drop('TableName').to_dict()  # Get other fields to add later

    for date in date_range:
        query = f"""
        SELECT COUNT(*) 
        FROM {table_name} 
        WHERE CAST(YourDateColumn AS DATE) = '{date.strftime('%Y-%m-%d')}'
        """
        try:
            cursor = conn.cursor()
            cursor.execute(query)
            count = cursor.fetchone()[0] if cursor.fetchone() is not None else 0
        except Exception as e:
            print(f"Error querying table {table_name} for date {date}: {e}")
            count = 0
        
        # Append the result to the list
        result_entry = {'Date': date.strftime('%Y-%m-%d'), 'Count': count}
        result_entry.update(other_fields)  # Add other fields
        results.append(result_entry)

# Convert results to DataFrame
final_df = pd.DataFrame(results)

# Pivot the DataFrame
pivot_df = final_df.pivot_table(index=[col for col in final_df.columns if col != 'Date' and col != 'Count'],
                                 columns='Date', 
                                 values='Count', 
                                 fill_value=0).reset_index()

# Replace NaN and ')' in a specific string column (change 'YourStringColumn' accordingly)
pivot_df['YourStringColumn'] = pivot_df['YourStringColumn'].fillna('SpecificString').str.replace(')', 'SpecificString')

# Save to CSV
pivot_df.to_csv('row_counts_pivoted.csv', index=False)

# Create an HTML table with CSS styling
html = pivot_df.to_html(classes='styled-table', index=False)

# Save HTML to file
with open('row_counts_pivoted.html', 'w') as f:
    f.write('''
    <html>
    <head>
        <style>
            .styled-table {
                border-collapse: collapse;
                width: 100%;
                border: 1px solid #dddddd;
                font-size: 18px;
                text-align: left;
            }
            .styled-table th, .styled-table td {
                padding: 12px;
                border: 1px solid #dddddd;
            }
            .styled-table th {
                background-color: #f2f2f2;
            }
        </style>
    </head>
    <body>
        <h2>Row Counts by Date</h2>
        ''' + html + '''
    </body>
    </html>
    ''')

# Close the database connection
conn.close()

