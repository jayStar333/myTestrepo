#Method 1

import pyodbc
import pandas as pd
import datetime

# Database connection parameters
server = 'your_server'
database = 'your_database'
username = 'your_username'
password = 'your_password'
connection_string = f'DRIVER={{ODBC Driver 17 for SQL Server}};SERVER={server};DATABASE={database};UID={username};PWD={password}'

# Connect to the database
conn = pyodbc.connect(connection_string)

# Read the list of tables and additional fields from a CSV file
tables_df = pd.read_csv('tables_list.csv')

# Generate a range of dates dynamically for the last 7 days
end_date = datetime.date.today()
start_date = end_date - datetime.timedelta(days=6)
date_range = pd.date_range(start=start_date, end=end_date)

# Query each table and store results in a DataFrame
results = []
for index, row in tables_df.iterrows():
    table = row['table_name']
    additional_fields = row.drop('table_name').to_dict()
    
    query = f"""
    SELECT 
        '{table}' AS table_name,
        CAST(date_column AS DATE) AS date,
        COUNT(*) AS row_count
    FROM {table}
    WHERE CAST(date_column AS DATE) BETWEEN '{start_date}' AND '{end_date}'
    GROUP BY CAST(date_column AS DATE)
    """
    df = pd.read_sql(query, conn)
    
    # Ensure all dates in the range are represented
    df = df.set_index('date').reindex(date_range, fill_value=0).reset_index()
    df['table_name'] = table
    
    # Add additional fields to the DataFrame
    for field, value in additional_fields.items():
        df[field] = value
    
    results.append(df)

# Concatenate all results into a single DataFrame
final_df = pd.concat(results, ignore_index=True)

# Close the database connection
conn.close()

# Save the final DataFrame to a CSV file
final_df.to_csv('final_results.csv', index=False)

# Create a CSS-styled HTML table
html_output = final_df.to_html(classes='styled-table', index=False)

# Add CSS styling with a banner at the top
css = """
<style>
body {
    font-family: sans-serif;
}
.banner {
    text-align: center;
    font-size: 2em;
    margin-top: 20px;
}
.thin-bar {
    height: 5px;
    background-color: #009879;
    margin-bottom: 20px;
}
.styled-table {
    border-collapse: collapse;
    margin: 25px 0;
    font-size: 0.9em;
    font-family: sans-serif;
    min-width: 400px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
}
.styled-table thead tr {
    background-color: #009879;
    color: #ffffff;
    text-align: left;
}
.styled-table th,
.styled-table td {
    padding: 12px 15px;
}
.styled-table tbody tr {
    border-bottom: 1px solid #dddddd;
}
.styled-table tbody tr:nth-of-type(even) {
    background-color: #f3f3f3;
}
.styled-table tbody tr:last-of-type {
    border-bottom: 2px solid #009879;
}
</style>
"""

# Combine CSS and HTML with a banner
html_output = f"""
<html>
<head>{css}</head>
<body>
<div class="banner">Your Organization Name</div>
<div class="thin-bar"></div>
{html_output}
</body>
</html>
"""

# Save the HTML output to a file
with open('output.html', 'w') as file:
    file.write(html_output)

print("CSV file and HTML table with CSS styling have been generated and saved as 'final_results.csv' and 'output.html'.")


#Method 2

import pyodbc
import pandas as pd
import datetime
import csv
import os

def query_sql_server(server, database, username, password, query):
    """
    Executes a SQL query against a specified SQL Server instance.

    Args:
        server: The SQL Server server name.
        database: The database name.
        username: The username for authentication.
        password: The password for authentication.
        query: The SQL query to execute.

    Returns:
        A pandas DataFrame containing the query results.
    """

    conn_str = (
        r"DRIVER={ODBC Driver 17 for SQL Server};"
        f"SERVER={server};"
        f"DATABASE={database};"
        f"UID={username};"
        f"PWD={password}"
    )

    try:
        conn = pyodbc.connect(conn_str)
        df = pd.read_sql_query(query, conn)
        conn.close()
        return df
    except pyodbc.Error as e:
        print(f"Error connecting to SQL Server: {e}")
        return None

def generate_date_range(start_date, end_date):
    """
    Generates a list of dates within a specified range.

    Args:
        start_date: The start date (inclusive).
        end_date: The end date (inclusive).

    Returns:
        A list of dates.
    """

    delta = end_date - start_date + datetime.timedelta(days=1)
    return [start_date + datetime.timedelta(days=i) for i in range(delta.days)]

def main():
    # Replace with your SQL Server credentials and database name
    server = "your_server_name"
    database = "your_database_name"
    username = "your_username"
    password = "your_password"

    # Replace with the path to your CSV file containing table names
    table_file = "table_names.csv"

    # Specify the start and end dates for the query
    start_date = datetime.date(2024, 1, 1)  # Replace with your desired start date
    end_date = datetime.date(2024, 12, 31)  # Replace with your desired end date

    # Read table names from the CSV file
    with open(table_file, 'r') as f:
        table_names = [row.strip() for row in f]

    # Create a list to store the query results
    results = []

    for table_name in table_names:
        query = f"""
            SELECT CAST(date_column AS DATE) AS date, COUNT(*) AS row_count
            FROM {table_name}
            WHERE date_column >= '{start_date}' AND date_column <= '{end_date}'
            GROUP BY CAST(date_column AS DATE)
        """

        # Replace 'date_column' with the actual column name in your table
        df = query_sql_server(server, database, username, password, query)

        # Create a DataFrame with all dates and fill missing values with 0
        date_range = generate_date_range(start_date, end_date)
        df_all_dates = pd.DataFrame({'date': date_range})
        df = df_all_dates.merge(df, on='date', how='left').fillna(0)

        # Add table name to the results
        df['table_name'] = table_name
        results.append(df)

    # Concatenate results from all tables
    final_df = pd.concat(results, ignore_index=True)

    # Save results to CSV
    final_df.to_csv('table_counts.csv', index=False)

    # Save results to HTML with CSS styling
    html_content = final_df.to_html(index=False, classes=['table', 'table-striped', 'table-bordered'])
    with open('table_counts.html', 'w') as f:
        f.write(html_content)

if __name__ == '__main__':
    main()

#Method 3

import pandas as pd
import pyodbc
from datetime import datetime, timedelta

# Database connection parameters
server = 'your_server'
database = 'your_database'
username = 'your_username'
password = 'your_password'

# Connect to SQL Server
conn_string = f"DRIVER={{SQL Server}};SERVER={server};DATABASE={database};UID={username};PWD={password}"
conn = pyodbc.connect(conn_string)

# Read the list of tables from CSV
tables_df = pd.read_csv('tables.csv')
table_names = tables_df['TableName'].tolist()  # Assuming the CSV has a column named 'TableName'

# Define date range
start_date = datetime(2023, 1, 1)  # Adjust as necessary
end_date = datetime(2023, 10, 1)    # Adjust as necessary
date_range = [start_date + timedelta(days=x) for x in range((end_date - start_date).days + 1)]

# Initialize results dictionary
results = {table: {date.strftime('%Y-%m-%d'): 0 for date in date_range} for table in table_names}

# Query each table for row counts per date
for table in table_names:
    for date in date_range:
        query = f"""
        SELECT COUNT(*) 
        FROM {table} 
        WHERE CAST(YourDateColumn AS DATE) = '{date.strftime('%Y-%m-%d')}'
        """
        try:
            cursor = conn.cursor()
            cursor.execute(query)
            count = cursor.fetchone()[0]
            results[table][date.strftime('%Y-%m-%d')] = count
        except Exception as e:
            print(f"Error querying table {table} for date {date}: {e}")

# Convert results to DataFrame
final_df = pd.DataFrame(results).T.fillna(0).astype(int)

# Save to CSV
final_df.to_csv('row_counts.csv')

# Create an HTML table with CSS styling
html = final_df.to_html(classes='styled-table')

# Save HTML to file
with open('row_counts.html', 'w') as f:
    f.write('''
    <html>
    <head>
        <style>
            .styled-table {
                border-collapse: collapse;
                width: 100%;
                border: 1px solid #dddddd;
                font-size: 18px;
                text-align: left;
            }
            .styled-table th, .styled-table td {
                padding: 12px;
                border: 1px solid #dddddd;
            }
            .styled-table th {
                background-color: #f2f2f2;
            }
        </style>
    </head>
    <body>
        <h2>Row Counts by Date</h2>
        ''' + html + '''
    </body>
    </html>
    ''')

# Close the database connection
conn.close()
